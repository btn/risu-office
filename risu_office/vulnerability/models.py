from django.db import models


class FamilySelections(models.Model):
    policy = models.ForeignKey('Policies', null=True, blank=True)
    family_name = models.CharField(max_length=765, blank=True)
    status = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'family_selections'


class Hosts(models.Model):
    report = models.ForeignKey('Reports', null=True, blank=True)
    name = models.CharField(max_length=765, blank=True)
    os = models.CharField(max_length=765, blank=True)
    mac = models.CharField(max_length=765, blank=True)
    start = models.DateTimeField(null=True, blank=True)
    end = models.DateTimeField(null=True, blank=True)
    ip = models.CharField(max_length=765, blank=True)
    fqdn = models.CharField(max_length=765, blank=True)
    netbios = models.CharField(max_length=765, blank=True)
    local_checks_proto = models.CharField(max_length=765, blank=True)
    smb_login_used = models.CharField(max_length=765, blank=True)
    ssh_auth_meth = models.CharField(max_length=765, blank=True)
    ssh_login_used = models.CharField(max_length=765, blank=True)
    pci_dss_compliance = models.CharField(max_length=765, blank=True)
#    pci_dss_compliance_ = models.CharField(max_length=765, blank=True)
    pcidss_compliance_failed = models.CharField(max_length=765, blank=True)
    pcidss_compliance_passed = models.CharField(max_length=765, blank=True)
    pcidss_deprecated_ssl = models.CharField(max_length=765, blank=True)
    pcidss_expired_ssl_certificate = models.CharField(max_length=765, blank=True)
    pcidss_obsolete_operating_system = models.CharField(max_length=765, blank=True)
    pcidss_dns_zone_transfer = models.CharField(max_length=765, blank=True)
    pcidss_high_risk_flaw = models.CharField(max_length=765, blank=True)
    pcidss_medium_risk_flaw = models.CharField(max_length=765, blank=True)
    pcidss_reachable_db = models.CharField(max_length=765, blank=True)
    pcidss_www_xss = models.CharField(max_length=765, blank=True)
    pcidss_directory_browsing = models.CharField(max_length=765, blank=True)
    pcidss_known_credentials = models.CharField(max_length=765, blank=True)
    pcidss_compromised_host_worm = models.CharField(max_length=765, blank=True)
    pcidss_unprotected_mssql_db = models.CharField(max_length=765, blank=True)
    pcidss_obsolete_software = models.CharField(max_length=765, blank=True)
    pcidss_www_sql_injection = models.CharField(max_length=765, blank=True)
    system_type = models.CharField(max_length=765, blank=True)
    notes = models.TextField(blank=True)

    class Meta:
        db_table = u'hosts'


class IndividualPluginSelections(models.Model):
    policy_id = models.CharField(max_length=765, blank=True)
    plugin_id = models.IntegerField(null=True, blank=True)
    plugin_name = models.CharField(max_length=765, blank=True)
    family = models.CharField(max_length=765, blank=True)
    status = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'individual_plugin_selections'


class Items(models.Model):
    host = models.ForeignKey('Hosts', null=True, blank=True)
    plugin = models.ForeignKey('Plugins', null=True, blank=True)
    plugin_output = models.TextField(blank=True)
    port = models.IntegerField(null=True, blank=True)
    svc_name = models.CharField(max_length=765, blank=True)
    protocol = models.CharField(max_length=765, blank=True)
    severity = models.IntegerField(null=True, blank=True)
    plugin_name = models.CharField(max_length=765, blank=True)
    verified = models.IntegerField(null=True, blank=True)

    class Meta:
        db_table = u'items'


class Patches(models.Model):
    host = models.ForeignKey('Hosts', null=True, blank=True)
    name = models.CharField(max_length=765, blank=True)
    value = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'patches'


class Plugins(models.Model):
    plugin_name = models.CharField(max_length=765, blank=True)
    family_name = models.CharField(max_length=765, blank=True)
    description = models.TextField(blank=True)
    plugin_version = models.CharField(max_length=765, blank=True)
    plugin_publication_date = models.DateTimeField(null=True, blank=True)
    plugin_modification_date = models.DateTimeField(null=True, blank=True)
    vuln_publication_date = models.DateTimeField(null=True, blank=True)
    cvss_vector = models.CharField(max_length=765, blank=True)
    cvss_base_score = models.CharField(max_length=765, blank=True)
    cvss_temporal_score = models.CharField(max_length=765, blank=True)
    cvss_temporal_vector = models.CharField(max_length=765, blank=True)
    exploitability_ease = models.CharField(max_length=765, blank=True)
    exploit_framework_core = models.CharField(max_length=765, blank=True)
    exploit_framework_metasploit = models.CharField(max_length=765, blank=True)
    metasploit_name = models.CharField(max_length=765, blank=True)
    exploit_framework_canvas = models.CharField(max_length=765, blank=True)
    canvas_package = models.CharField(max_length=765, blank=True)
    exploit_available = models.CharField(max_length=765, blank=True)
    risk_factor = models.CharField(max_length=765, blank=True)
    solution = models.TextField(blank=True)
    synopsis = models.TextField(blank=True)
    plugin_type = models.CharField(max_length=765, blank=True)
    exploit_framework_exploithub = models.CharField(max_length=765, blank=True)
    exploithub_sku = models.CharField(max_length=765, blank=True)
    stig_severity = models.CharField(max_length=765, blank=True)
    fname = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'plugins'


class PluginsPreferences(models.Model):
    policy = models.ForeignKey('Policies', null=True, blank=True)
    plugin_id = models.IntegerField(null=True, blank=True)
    plugin_name = models.CharField(max_length=765, blank=True)
    fullname = models.CharField(max_length=765, blank=True)
    preference_name = models.CharField(max_length=765, blank=True)
    preference_type = models.CharField(max_length=765, blank=True)
    preference_values = models.CharField(max_length=765, blank=True)
    selected_values = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'plugins_preferences'


class Policies(models.Model):
    name = models.CharField(max_length=765, blank=True)
    comments = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'policies'


class References(models.Model):
    plugin = models.ForeignKey('Plugins', null=True, blank=True)
    reference_name = models.CharField(max_length=765, blank=True)
    value = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'references'


class Reports(models.Model):
    policy = models.ForeignKey('Policies', null=True, blank=True)
    name = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'reports'


class ServerPreferences(models.Model):
    policy = models.ForeignKey('Policies', null=True, blank=True)
    name = models.CharField(max_length=765, blank=True)
    value = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'server_preferences'


class ServiceDescriptions(models.Model):
    name = models.CharField(max_length=765, blank=True)
    port = models.IntegerField(null=True, blank=True)
    description = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'service_descriptions'


class Versions(models.Model):
    version = models.CharField(max_length=765, blank=True)

    class Meta:
        db_table = u'versions'

